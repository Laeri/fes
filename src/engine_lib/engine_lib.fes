

struct PaletteData {
  bg0
  bg1
  bg2
  bg3
  s0
  s1
  s2
  s3
}

struct Palette {
  col0
  col1
  col2
}



const screen_width 256
const screen_height 240
const tile_width 8
const tile_height 8
const block_width 16
const block_height 16



const ppu_control_reg_1 0x2000
variable ppu_control_reg_1_buffer

const ppu_control_reg2 0x2001
variable ppu_control_reg_2_buffer


const ppu_status_reg 0x2002
const ppu_io_set_reg 0x2006
const ppu_io_rw_reg 0x2007

#[ (value bit_in_binary - bool) use $FD for temporary storage ]#
: bit_set?
swap
[
sta $FD ; store temporarily because bit can only use zero page or absolute addressing modes
]
swap
[
bit $FD
beq bit_set_false
bit_set_true:
lda #$FF
jmp bit_set_done
bit_set_false:
lda #$00
bit_set_done:
INX ; pop value from stack and just leave true/false in tos (accumulator)
]
;


#[ ]#
: set_intensify_blues
if
ppu_control_reg_2_buffer @
0b10000000
or
else
ppu_control_reg_2_buffer @
0b01111111
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;

#[ bit 7 = 0b10000000 ]# 
: intensify_blues?
ppu_control_reg_2_buffer @
0b10000000 bit_set?
;
