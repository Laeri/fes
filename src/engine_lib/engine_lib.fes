

struct PaletteData {
  bg0
  bg1
  bg2
  bg3
  sp0
  sp1
  sp2
  sp3
}

struct Palette {
  col0
  col1
  col2
}



const screen_width 256
const screen_height 240
const tile_width 8
const tile_height 8
const block_width 16
const block_height 16



const ppu_control_reg_1 0x2000
variable ppu_control_reg_1_buffer

const ppu_control_reg2 0x2001
variable ppu_control_reg_2_buffer

const ppu_status_reg 0x2002

const ppu_io_set_reg 0x2006
const ppu_io_rw_reg 0x2007

#[ (value bit_in_binary - bool) use $FD for temporary storage ]#
: bit_set?
swap
[
sta $FD ; store temporarily because bit can only use zero page or absolute addressing modes
]
swap
[
bit $FD
beq bit_set_false
bit_set_true:
lda #$FF
jmp bit_set_done
bit_set_false:
lda #$00
bit_set_done:
INX ; pop value from stack and just leave true/false in tos (accumulator)
]
;


#[ ]#
: set_intensify_blues
if
ppu_control_reg_2_buffer @
0b10000000
or
else
ppu_control_reg_2_buffer @
0b01111111
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;

#[ bit 7 = 0b10000000 ]# 
: intensify_blues?
ppu_control_reg_2_buffer @
0b10000000 bit_set?
;

: set_intensify_greens
if
ppu_control_reg_2_buffer @
0b01000000
or
else
ppu_control_reg_2_buffer @
0b10111111
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;

: intensify_greens?
ppu_control_reg_2_buffer @
0b01000000 bit_set?
;

: set_intensify_reds
if
ppu_control_reg_2_buffer @
0b00100000
or
else
ppu_control_reg_2_buffer @
0b11011111
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;

: intensify_reds?
ppu_control_reg_2_buffer @
0b00100000 bit_set?
;

: set_show_sprites
if
ppu_control_reg_2_buffer @
0b00010000
or
else
ppu_control_reg_2_buffer @
0b11101111
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;




: set_show_background
if
ppu_control_reg_2_buffer @
0b00001000
or
else
ppu_control_reg_2_buffer @
0b11110111
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;

: set_show_sprites_leftmost_eight
if
ppu_control_reg_2_buffer @
0b00000100
or
else
ppu_control_reg_2_buffer @
0b11111011
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;

: set_show_background_leftmost_eight
if
ppu_control_reg_2_buffer @
0b00000010
or
else
ppu_control_reg_2_buffer @
0b11111101
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;

: set_greyscale
if
ppu_control_reg_2_buffer @
0b00000001
or
else
ppu_control_reg_2_buffer @
0b11111110
and
then
[
sta $2001
]
ppu_control_reg_2_buffer !
;


: show_sprites?
ppu_control_reg_2_buffer @
0b00001000 bit_set?
;

: show_background?
ppu_control_reg_2_buffer @
0b00010000 bit_set?
;

: show_sprites_leftmost_eight?
ppu_control_reg_2_buffer @
0b00000100 bit_set?
;

: show_background_leftmost_eight?
ppu_control_reg_2_buffer @
0b00000010 bit_set?
;

: greyscale?
ppu_control_reg_2_buffer @
0b00000001 bit_set?
;


#[ PPUSTATUS, $2002 ]#

: in_vblank?
ppu_status_reg @
0b10000000 bit_set?
;

: sprite0_hit?
ppu_status_reg @
0b01000000 bit_set?
;


: sprite_overflow?
ppu_status_reg @
0b00100000 bit_set?
;


const background_palette_start_addr_high 0x3F
const background_palette_start_addr_low 0x00
const sprite_palette_start_addr_high 0x3F
const sprite_palette_start_addr_low 0x10


#[ (high_byte low_byte - ) write high_byte / low_byte to start transfer ]#
: start_dma_transfer
[
sta $2003
lda $0200,X
sta $4014
inx
lda $0200,X
inx
]
;


: set_generate_nmi
if
ppu_control_reg_1_buffer @
0b10000000
or
else
ppu_control_reg_1_buffer @
0b01111111
and
then
[
sta $2000
]
ppu_control_reg_1_buffer !
;

: set_sprite_size_8x8
not
if
ppu_control_reg_1_buffer @
0b01000000
or
else
ppu_control_reg_1_buffer @
0b10111111
and
then
[
sta $2000
]
ppu_control_reg_1_buffer !
;

: set_sprite_size_8x16
if
ppu_control_reg_1_buffer @
0b01000000
or
else
ppu_control_reg_1_buffer @
0b10111111
and
then
[
sta $2000
]
ppu_control_reg_1_buffer !
;



#[ assumes pointer to PaletteData struct is on stack ]#
: load_palette_data
dup get-PaletteData-bg0 load_palette
dup get-PaletteData-bg1 load_palette
dup get-PaletteData-bg2 load_palette
dup get-PaletteData-bg3 load_palette
dup get-PaletteData-sp0 load_palette
dup get-PaletteData-sp1 load_palette
dup get-PaletteData-sp2 load_palette
dup get-PaletteData-sp3 load_palette
;

#[ assumes pointer to Palette struct is on stack ]#
: load_palette
dup get-Palette-col0 store_colour
dup get-Palette-col1 store_colour
get-Palette-col2 store_colour
;

#[ ]#
: store_colour
[
sta $2007
]
drop
;

























